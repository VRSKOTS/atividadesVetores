#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Definição da estrutura do produto
typedef struct Produto {
    int codigo;
    char descricao[50];
    int quantidade;
    float valor;
    struct Produto* proximo;
} Produto;

// função que inicializa uma lista vazia
Produto* inicializaLista() {
    return NULL;
}

// função que adiciona um novo produto à lista de estoque
Produto* adicionaProduto(Produto* lista) {
    Produto* novoProduto = (Produto*)malloc(sizeof(Produto));

    printf("Informe o codigo do produto: ");
    scanf("%d", &novoProduto->codigo);
    printf("Informe a descricao do produto: ");
    scanf(" %[^\n]s", novoProduto->descricao);
    printf("Informe a quantidade do produto: ");
    scanf("%d", &novoProduto->quantidade);
    printf("Informe o valor do produto: ");
    scanf("%f", &novoProduto->valor);

    novoProduto->proximo = lista;

    return novoProduto;
}

// função que percorre a lista de estoque e imprime um relatório
void imprimeRelatorio(Produto* lista) {
    Produto* atual = lista;

    while (atual != NULL) {
        printf("Codigo: %d\nDescricao: %s\nQuantidade: %d\nValor: %.2f\n\n",
               atual->codigo, atual->descricao, atual->quantidade, atual->valor);

        atual = atual->proximo;
    }
}

// função que permite ao usuário pesquisar um produto pelo código
void pesquisaProduto(Produto* lista) {
    int codigoPesquisa;
    printf("Informe o codigo do produto a ser pesquisado: ");
    scanf("%d", &codigoPesquisa);

    Produto* atual = lista;

    while (atual != NULL) {
        if (atual->codigo == codigoPesquisa) {
            printf("Produto encontrado:\n");
            printf("Codigo: %d\nDescricao: %s\nQuantidade: %d\nValor: %.2f\n",
                   atual->codigo, atual->descricao, atual->quantidade, atual->valor);
            return;
        }
        atual = atual->proximo;
    }

    printf("Produto nao encontrado.\n");
}

// função que permite ao usuário remover um produto do estoque
Produto* removeProduto(Produto* lista) {
    int codigoRemocao;
    printf("Informe o codigo do produto a ser removido: ");
    scanf("%d", &codigoRemocao);

    Produto *anterior = NULL, *atual = lista;

    while (atual != NULL) {
        if (atual->codigo == codigoRemocao) {
            if (anterior == NULL) {
                // Remoção do primeiro elemento
                lista = atual->proximo;
            } else {
                anterior->proximo = atual->proximo;
            }

            free(atual);
            printf("Produto removido com sucesso.\n");
            return lista;
        }

        anterior = atual;
        atual = atual->proximo;
    }

    printf("Produto nao encontrado.\n");
    return lista;
}

// função principal
int main() {
    Produto* estoque = inicializaLista();
    int opcao;

    do {
        printf("\nMenu:\n");
        printf("1 - Adicionar Produto\n");
        printf("2 - Imprimir Relatorio\n");
        printf("3 - Pesquisar Produto\n");
        printf("4 - Remover Produto\n");
        printf("0 - Sair\n");

        printf("Escolha uma opcao: ");
        scanf("%d", &opcao);

        switch (opcao) {
            case 1:
                estoque = adicionaProduto(estoque);
                break;
            case 2:
                imprimeRelatorio(estoque);
                break;
            case 3:
                pesquisaProduto(estoque);
                break;
            case 4:
                estoque = removeProduto(estoque);
                break;
            case 0:
                printf("Saindo do programa.\n");
                break;
            default:
                printf("Opcao invalida. Tente novamente.\n");
        }
    } while (opcao != 0);

    // libera a memória alocada para a lista
    while (estoque != NULL) {
        Produto* proximo = estoque->proximo;
        free(estoque);
        estoque = proximo;
    }

    return 0;
}
